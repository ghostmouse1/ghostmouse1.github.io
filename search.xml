<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java</title>
      <link href="/2022/06/05/java/"/>
      <url>/2022/06/05/java/</url>
      
        <content type="html"><![CDATA[<h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><p>[]: <a href="https://docs.oracle.com/javase/9/docs/api/overview-summary.html">https://docs.oracle.com/javase/9/docs/api/overview-summary.html</a>    “JAVADOC”</p><h2 id="驼峰命名法："><a href="#驼峰命名法：" class="headerlink" title="驼峰命名法："></a>驼峰命名法：</h2><p>驼峰式命名法就是当变量名或函式名是由一个或多个单词连结在一起，而构成的唯一识别字时，第一个单词以小写字母开始；第二个单词的首字母大写或每一个单词的首字母都采用大写字母，例如：myFirstName、myLastName，这样的变量名看上去就像驼峰峰一样此起彼伏，故得名。<br>驼峰式命名法的命名规则可视为一种惯例，并无绝对与强制，为的是增加识别和可读性。</p><h3 id="小驼峰法"><a href="#小驼峰法" class="headerlink" title="小驼峰法"></a>小驼峰法</h3><p>变量一般用小驼峰法标识。驼峰法的意思是：除第一个单词之外，其他单词首字母大写。譬如<br>int myStudentCount;<br>变量myStudentCount第一个单词是全部小写，后面的单词首字母大写。</p><h3 id="大驼峰法"><a href="#大驼峰法" class="headerlink" title="大驼峰法"></a>大驼峰法</h3><p>相比小驼峰法，大驼峰法把第一个单词的首字母也大写了。常用于类名，函数名，属性，命名空间。譬如<br>public class DataBaseUser;</p><h3 id="1-关于static"><a href="#1-关于static" class="headerlink" title="1.关于static"></a>1.关于static</h3><p>使用static关键字即将变量/方法定义为公共。在类不被实体化时就可以使用。static方法只允许调用static属性或static方法。而非static方法可以调用static方法或属性。</p><p>static代码块优先执行（包括主函数）</p><h3 id="2-Annotation注解"><a href="#2-Annotation注解" class="headerlink" title="2.Annotation注解"></a>2.Annotation注解</h3><p>1.@override  使必须是覆写的方法</p><p>2.@deprecated 表示该方法已过期</p><p>3.@SuppressWarning 压制警告</p><h3 id="3-多态性"><a href="#3-多态性" class="headerlink" title="3.多态性"></a>3.多态性</h3><p>向上及向下转型</p><p>instanceof  –返回bool类型，判断俩个类之间是否有关联</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">superman</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">main</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person per<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">superman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向上转型</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>per <span class="token keyword">instanceof</span> <span class="token class-name">superman</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            superman man<span class="token operator">=</span><span class="token punctuation">(</span>superman<span class="token punctuation">)</span> per <span class="token comment" spellcheck="true">//向下转型</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="4-装箱与拆箱"><a href="#4-装箱与拆箱" class="headerlink" title="4.装箱与拆箱"></a>4.装箱与拆箱</h3><p>将一个变量包装成一个类，例如int 使用Integer  自动装箱 例如：Integer obj=10；被包装的变量可以实现各类运算。使用int a=obj自动拆箱（装箱以方便统一使用objecct传递参数）</p><h3 id="5-俩种设计模式"><a href="#5-俩种设计模式" class="headerlink" title="5.俩种设计模式"></a>5.俩种设计模式</h3><p>1.代理模式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IEat</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">eatreal</span> <span class="token keyword">implements</span> <span class="token class-name">IEat</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"真实主题：吃东西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">daili</span> <span class="token keyword">implements</span> <span class="token class-name">IEate</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> IEat eat<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">daili</span><span class="token punctuation">(</span>IEat eat<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>eat<span class="token operator">=</span>eat<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>eat<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理主题：买东西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理主题：做东西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">main</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        IEat eat<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">daili</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">eatreal</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        eat<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>2.工厂模式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">food</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">bread</span> <span class="token keyword">implements</span> <span class="token class-name">IEat</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃面包"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Milk</span> <span class="token keyword">implements</span> <span class="token class-name">IEat</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喝牛奶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Factory</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> food <span class="token function">getinstance</span><span class="token punctuation">(</span>String classname<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"bread"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">bread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"milk"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Milk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">main</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       food foodd<span class="token operator">=</span>Factory<span class="token punctuation">.</span><span class="token function">getinstance</span><span class="token punctuation">(</span>arg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        food<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="6-抽象类与接口的区别"><a href="#6-抽象类与接口的区别" class="headerlink" title="6.抽象类与接口的区别"></a>6.抽象类与接口的区别</h3><table><thead><tr><th align="center">区别</th><th align="center">抽象类</th><th align="center">接口</th></tr></thead><tbody><tr><td align="center">定义关键字</td><td align="center">abstract class</td><td align="center">interface</td></tr><tr><td align="center">组成</td><td align="center">构造，普通方法，静态方法，全局常量，成员</td><td align="center">抽象方法，全局常量，普通方法，static方法</td></tr><tr><td align="center">权限</td><td align="center">各种权限定义</td><td align="center">只能使用public</td></tr><tr><td align="center">子类使用</td><td align="center">extends只能继承一个抽象类</td><td align="center">使用implements可以实现多个接口</td></tr><tr><td align="center">俩者关系</td><td align="center">抽象类可以实现多个接口</td><td align="center">接口不允许继承抽象类，但允许继承多个父接口</td></tr></tbody></table><p>当抽象类与接口都可以实现的情况下，优先使用接口</p><h3 id="7-内部类"><a href="#7-内部类" class="headerlink" title="7.内部类"></a>7.内部类</h3><p>会破坏代码的结构，但可以任意调用外部类的私有属性，外部类也可以访问内部类的私有属性。</p><p>内部类的实例化方法：外部类.内部类 对象名称 = new 外部类（）.new 内部类（）;</p><p>如果在内部类中中使用static定义，那么内部类就变成了外部类</p><p>如果需要实例化static定义的内部类则：</p><p>外部类.内部类 对象名称 = new 外部类.内部类（）;</p><p>一般使用static定义内部接口，以方便统一。</p><p>内部类可以并且通常都在方法中定义</p><h6 id="内部接口："><a href="#内部接口：" class="headerlink" title="内部接口："></a>内部接口：</h6><p>内部接口可以不被继承</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IChannel</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span>IMessage mes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">interface</span> <span class="token class-name">IMessage</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">temp</span> <span class="token keyword">implements</span> <span class="token class-name">IChannel</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span>IMessage mes<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mas<span class="token punctuation">.</span>getContent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">mestemp</span> <span class="token keyword">implements</span> <span class="token class-name">IMessage</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"123"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">main</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           Ichannel channel<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          channel<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>channel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">mestemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此处channel为Ichannel类型，不能实例化temp的子类。</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h6 id="匿名内部类："><a href="#匿名内部类：" class="headerlink" title="匿名内部类："></a>匿名内部类：</h6><p>匿名内部类是一个没有名字且只能使用一次的，并且结构固定的一个子类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IMessage</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IMessage <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//static方法实现</span>        <span class="token keyword">return</span> <span class="token function">IMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//匿名内部类</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printfln</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">main</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String arg<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        IMessage<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="8-Lambda表达式"><a href="#8-Lambda表达式" class="headerlink" title="8.Lambda表达式"></a>8.Lambda表达式</h3><p>用于函数式接口（只有一个抽象方法的接口）。</p><p>格式：</p><ul><li>方法没有参数：()-&gt;{};</li><li>方法有参数：(参数，参数)-&gt;{};</li><li>只有一行语句返回：(参数，参数)-&gt;语句；</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatisplus</title>
      <link href="/2022/06/04/Mybatisplus/"/>
      <url>/2022/06/04/Mybatisplus/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatisPlus-SpringBoot版-–2022"><a href="#MyBatisPlus-SpringBoot版-–2022" class="headerlink" title="MyBatisPlus(SpringBoot版)–2022"></a>MyBatisPlus(SpringBoot版)–2022</h1><h1 id="一、MyBatis-Plus简介"><a href="#一、MyBatis-Plus简介" class="headerlink" title="一、MyBatis-Plus简介"></a>一、MyBatis-Plus简介</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p><strong>MyBatis-Plus</strong>(简称 MP)是一个 <strong>MyBatis的增强工具</strong>，在 MyBatis 的基础上<strong>只做增强不做改变</strong>，为 <strong>简化开发、提高效率而生。</strong></p><p>愿景</p><p>我们的愿景是成为 MyBatis 最好的搭档，就像魂斗罗中的 1P、2P，基友搭配，效率翻倍。</p><p><img src="/2022/06/04/Mybatisplus/image.png" alt="image"></p><h2 id="2、特性"><a href="#2、特性" class="headerlink" title="2、特性"></a>2、特性</h2><ul><li><strong>无侵入</strong>:只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑 </li><li><strong>损耗小</strong>:启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>:内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>:通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错 支持主键自动生成:支持多达 4 种主键策略(内含分布式唯一 ID 生成器 - Sequence)，可自由 配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式:支持 ActiveRecord 形式调用</strong>，实体类只需继承 Model 类即可进行强 大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>:支持全局通用方法注入( Write once, use anywhere ) 内置代码生成器:采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>:基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等 同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>:支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、 Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>:可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出 慢查询</li><li><strong>内置全局拦截插件</strong>:提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防 误操作</li></ul><h2 id="3、支持数据库"><a href="#3、支持数据库" class="headerlink" title="3、支持数据库"></a>3、支持数据库</h2><p>任何能使用MyBatis进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下</p><ul><li>MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ， ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb </li><li>达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据 库，瀚高数据库</li></ul><h2 id="4、-框架结构"><a href="#4、-框架结构" class="headerlink" title="4、 框架结构"></a>4、 框架结构</h2><p><img src="/2022/06/04/Mybatisplus/image0.png"></p><h2 id="5、代码文档及文档地址"><a href="#5、代码文档及文档地址" class="headerlink" title="5、代码文档及文档地址"></a>5、代码文档及文档地址</h2><p>官方地址: <a href="http://mp.baomidou.com/">http://mp.baomidou.com</a></p><p>代码发布地址:</p><p>Github: <a href="https://github.com/baomidou/mybatis-plus">https://github.com/baomidou/mybatis-plus</a> </p><p>Gitee: <a href="https://gitee.com/baomidou/mybatis-plus">https://gitee.com/baomidou/mybatis-plus</a> </p><p>文档发布地址: <a href="https://baomidou.com/pages/24112f">https://baomidou.com/pages/24112f</a></p><h1 id="二、入门案例"><a href="#二、入门案例" class="headerlink" title="二、入门案例"></a>二、入门案例</h1><h2 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h2><p>IDE:idea：2021.3</p><p>JDK:JDK8+</p><p>构建工具:maven 3.8.4 </p><p>MySQL版本:MySQL 8.0.27</p><p>Spring Boot:2.6.4 </p><p>MyBatis-Plus:3.5.1</p><p>系统：mac m1</p><h2 id="2、创建数据库及表"><a href="#2、创建数据库及表" class="headerlink" title="2、创建数据库及表"></a>2、创建数据库及表</h2><h3 id="a-gt-创建表"><a href="#a-gt-创建表" class="headerlink" title="a&gt;创建表"></a>a&gt;创建表</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">`</span>mybatis_plus<span class="token punctuation">`</span> <span class="token comment" spellcheck="true">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token punctuation">`</span>mybatis_plus<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><h3 id="b-gt-添加数据"><a href="#b-gt-添加数据" class="headerlink" title="b&gt;添加数据"></a>b&gt;添加数据</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> email<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Jone'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'test1@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'test2@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'test3@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Sandy'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'test4@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'Billie'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'test5@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3、创建SpringBoot工程"><a href="#3、创建SpringBoot工程" class="headerlink" title="3、创建SpringBoot工程"></a>3、创建SpringBoot工程</h2><h3 id="a-gt-初始化工程"><a href="#a-gt-初始化工程" class="headerlink" title="a&gt;初始化工程"></a>a&gt;初始化工程</h3><p><img src="/2022/06/04/Mybatisplus/image1.png"></p><p><img src="/2022/06/04/Mybatisplus/image2.png"></p><h3 id="b-gt-引入依赖"><a href="#b-gt-引入依赖" class="headerlink" title="b&gt;引入依赖"></a>b&gt;引入依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--MyBatis-plus启动器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--lombok用于简化实体类开发--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--mysql驱动--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="c-gt-idea中安装lombok插件"><a href="#c-gt-idea中安装lombok插件" class="headerlink" title="c&gt;idea中安装lombok插件"></a>c&gt;idea中安装lombok插件</h3><p><img src="/2022/06/04/Mybatisplus/image3.png" alt="img"></p><p><strong>一般现在IDEA都内置有这个插件</strong></p><h2 id="4、编写代码"><a href="#4、编写代码" class="headerlink" title="4、编写代码"></a>4、编写代码</h2><h3 id="a-gt-配置application-yml"><a href="#a-gt-配置application-yml" class="headerlink" title="a&gt;配置application.yml"></a>a&gt;配置application.yml</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 配置数据源信息</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 配置数据源类型</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource    <span class="token comment" spellcheck="true"># 配置连接数据库信息</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token comment" spellcheck="true"># 我的数据库是8.0.27 5版本的可以使用 jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis_plus<span class="token punctuation">?</span>serverTimezone=GMT%2B8<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">'root'</span></code></pre><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>1、驱动类driver-class-name</p><p>spring boot 2.0(内置jdbc5驱动)，驱动类使用:</p><p><strong>driver-class-name: com.mysql.jdbc.Driver</strong></p><p>spring boot 2.1及以上(内置jdbc8驱动)，驱动类使用:</p><p><strong>driver-class-name: com.mysql.cj.jdbc.Driver</strong></p><p>否则运行测试用例的时候会有 WARN 信息</p><p>2、连接地址url</p><p>MySQL5.7版本的url:</p><p><strong>jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</strong></p><p>MySQL8.0版本的url:</p><p><strong>jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false</strong></p><p>否则运行测试用例报告如下错误:</p><p>java.sql.SQLException: The server time zone value ‘ÖÐ1ú±ê×1⁄4Ê±1⁄4ä’ is unrecognized or represents more</p><h3 id="b-gt-启动类"><a href="#b-gt-启动类" class="headerlink" title="b&gt;启动类"></a>b&gt;启动类</h3><p>在Spring Boot启动类中添加@MapperScan注解，扫描mapper包</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">// 扫描mapper接口所在的包</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.mybatisplus.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisplusApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MybatisplusApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="c-gt-添加实体"><a href="#c-gt-添加实体" class="headerlink" title="c&gt;添加实体"></a>c&gt;添加实体</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span></code></pre><p><strong>使用了Lombok注解</strong></p><h3 id><a href="#" class="headerlink" title></a><img src="/2022/06/04/Mybatisplus/image4.png" alt="img"></h3><h3 id="d-gt-添加mapper"><a href="#d-gt-添加mapper" class="headerlink" title="d&gt;添加mapper"></a>d&gt;添加mapper</h3><p><strong>BaseMapper</strong>是MyBatis-Plus提供的<strong>模板mapper</strong>，其中包含了基本的CRUD方法，<strong>泛型为操作的实体类型</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="e-gt-测试"><a href="#e-gt-测试" class="headerlink" title="e&gt;测试"></a>e&gt;测试</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">MybatisplusApplicationTests</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过条件构造器查询一个List集合，若没有条件，则可以设置null为参数</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="/2022/06/04/Mybatisplus/image5.png" alt="img"></p><h4 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h4><p>IDEA在 userMapper 处报错，因为找不到注入的对象，因为类是动态创建的，但是程序可以正确 的执行。</p><p>为了避免报错，可以在mapper接口上添加 <strong>@Repository</strong> 注解</p><h3 id="f-gt-添加日志"><a href="#f-gt-添加日志" class="headerlink" title="f&gt;添加日志"></a>f&gt;添加日志</h3><p>在application.yml中配置日志输出</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 加入日志功能</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl</code></pre><p>![img](./Mybatisplus/image (6).png)</p><h1 id="三、基本CRUD"><a href="#三、基本CRUD" class="headerlink" title="三、基本CRUD"></a>三、基本CRUD</h1><h2 id="1、BaseMapper"><a href="#1、BaseMapper" class="headerlink" title="1、BaseMapper"></a>1、BaseMapper</h2><p>MyBatis-Plus中的基本CRUD在内置的<strong>BaseMappe</strong>r中已得到了实现，我们可以直接使用，接口如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * Copyright (c) 2011-2022, baomidou (jobob@qq.com). * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>Wrapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>IPage<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>toolkit<span class="token punctuation">.</span>CollectionUtils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>toolkit<span class="token punctuation">.</span>Constants<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>toolkit<span class="token punctuation">.</span>ExceptionUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Param<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*               :`                    .:,                     :::,,.             ::      `::::::             ::`    `,:,` .:`             `:: `::::::::.:`      `:';,`              ::::,     .:::`   `@++++++++:               ``        :::`  @+++++++++++#                         :::, #++++++++++++++`                 ,:      `::::::;'##++++++++++                 .@#@;`   ::::::::::::::::::::;                  #@####@, :::::::::::::::+#;::.                  @@######+@:::::::::::::.  #@:;           ,      @@########':::::::::::: .#''':`           ;##@@@+:##########@::::::::::: @#;.,:.            #@@@######++++#####'::::::::: .##+,:#`            @@@@@#####+++++'#####+::::::::` ,`::@#:`            `@@@@#####++++++'#####+#':::::::::::@.             @@@@######+++++''#######+##';::::;':,`              @@@@#####+++++'''#######++++++++++`               #@@#####++++++''########++++++++'               `#@######+++++''+########+++++++;                `@@#####+++++''##########++++++,                 @@######+++++'##########+++++#`                @@@@#####+++++############++++;              ;#@@@@@####++++##############+++,             @@@@@@@@@@@###@###############++'           @#@@@@@@@@@@@@###################+:        `@#@@@@@@@@@@@@@@###################'`      :@#@@@@@@@@@@@@@@@@@##################,      ,@@@@@@@@@@@@@@@@@@@@################;       ,#@@@@@@@@@@@@@@@@@@@##############+`        .#@@@@@@@@@@@@@@@@@@#############@,          @@@@@@@@@@@@@@@@@@@###########@,           :#@@@@@@@@@@@@@@@@##########@,            `##@@@@@@@@@@@@@@@########+,              `+@@@@@@@@@@@@@@@#####@:`                `:@@@@@@@@@@@@@@##@;.                   `,'@@@@##@@@+;,`                        ``...`` _ _     /_ _ _/_. ____  /    _/ / //_//_//_|/ /_\  /_///_/_\      Talk is cheap. Show me the code.     _/             / */</span><span class="token comment" spellcheck="true">/** * Mapper 继承该接口后，无需编写 mapper.xml 文件，即可获得CRUD功能 * &lt;p>这个 Mapper 支持 id 泛型&lt;/p> * * @author hubin * @since 2016-01-23 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 插入一条记录     *     * @param entity 实体对象     */</span>    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据 ID 删除     *     * @param id 主键ID     */</span>    <span class="token keyword">int</span> <span class="token function">deleteById</span><span class="token punctuation">(</span>Serializable id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据实体(ID)删除     *     * @param entity 实体对象     * @since 3.4.4     */</span>    <span class="token keyword">int</span> <span class="token function">deleteById</span><span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据 columnMap 条件，删除记录     *     * @param columnMap 表字段 map 对象     */</span>    <span class="token keyword">int</span> <span class="token function">deleteByMap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>COLUMN_MAP<span class="token punctuation">)</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据 entity 条件，删除记录     *     * @param queryWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）     */</span>    <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>WRAPPER<span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 删除（根据ID或实体 批量删除）     *     * @param idList 主键ID列表或实体列表(不能为 null 以及 empty)     */</span>    <span class="token keyword">int</span> <span class="token function">deleteBatchIds</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>COLLECTION<span class="token punctuation">)</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据 ID 修改     *     * @param entity 实体对象     */</span>    <span class="token keyword">int</span> <span class="token function">updateById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>ENTITY<span class="token punctuation">)</span> T entity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据 whereEntity 条件，更新记录     *     * @param entity        实体对象 (set 条件值,可以为 null)     * @param updateWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）     */</span>    <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>ENTITY<span class="token punctuation">)</span> T entity<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>WRAPPER<span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据 ID 查询     *     * @param id 主键ID     */</span>    T <span class="token function">selectById</span><span class="token punctuation">(</span>Serializable id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查询（根据ID 批量查询）     *     * @param idList 主键ID列表(不能为 null 以及 empty)     */</span>    List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">selectBatchIds</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>COLLECTION<span class="token punctuation">)</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token operator">></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查询（根据 columnMap 条件）     *     * @param columnMap 表字段 map 对象     */</span>    List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">selectByMap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>COLUMN_MAP<span class="token punctuation">)</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据 entity 条件，查询一条记录     * &lt;p>查询一条记录，例如 qw.last("limit 1") 限制取一条记录, 注意：多条数据会报异常&lt;/p>     *     * @param queryWrapper 实体对象封装操作类（可以为 null）     */</span>    <span class="token keyword">default</span> T <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>WRAPPER<span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>T<span class="token operator">></span> ts <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> ExceptionUtils<span class="token punctuation">.</span><span class="token function">mpe</span><span class="token punctuation">(</span><span class="token string">"One record is expected, but the query result is multiple records"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据 Wrapper 条件，判断是否存在记录     *     * @param queryWrapper 实体对象封装操作类     * @return     */</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">exists</span><span class="token punctuation">(</span>Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Long count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectCount</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null <span class="token operator">!=</span> count <span class="token operator">&amp;&amp;</span> count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据 Wrapper 条件，查询总记录数     *     * @param queryWrapper 实体对象封装操作类（可以为 null）     */</span>    Long <span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>WRAPPER<span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据 entity 条件，查询全部记录     *     * @param queryWrapper 实体对象封装操作类（可以为 null）     */</span>    List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>WRAPPER<span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据 Wrapper 条件，查询全部记录     *     * @param queryWrapper 实体对象封装操作类（可以为 null）     */</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">selectMaps</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>WRAPPER<span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据 Wrapper 条件，查询全部记录     * &lt;p>注意： 只返回第一个字段的值&lt;/p>     *     * @param queryWrapper 实体对象封装操作类（可以为 null）     */</span>    List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">selectObjs</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>WRAPPER<span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据 entity 条件，查询全部记录（并翻页）     *     * @param page         分页查询条件（可以为 RowBounds.DEFAULT）     * @param queryWrapper 实体对象封装操作类（可以为 null）     */</span>    <span class="token operator">&lt;</span>P <span class="token keyword">extends</span> <span class="token class-name">IPage</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> P <span class="token function">selectPage</span><span class="token punctuation">(</span>P page<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>WRAPPER<span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据 Wrapper 条件，查询全部记录（并翻页）     *     * @param page         分页查询条件     * @param queryWrapper 实体对象封装操作类     */</span>    <span class="token operator">&lt;</span>P <span class="token keyword">extends</span> <span class="token class-name">IPage</span><span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>>></span> P <span class="token function">selectMapsPage</span><span class="token punctuation">(</span>P page<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>WRAPPER<span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="2、插入"><a href="#2、插入" class="headerlink" title="2、插入"></a>2、插入</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 测试BaseMapper的新增功能 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 实现新增用户信息</span>    <span class="token comment" spellcheck="true">// INSERT INTO user ( id, name, age, email ) VALUES ( ?, ?, ?, ? )</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// user.setId鲤L);</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">";张三"</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span>setAgeྷ<span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">";zhangsan@atguigu.com"</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">";result = "</span><span class="token punctuation">;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">";id = "</span><span class="token punctuation">;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>最终执行的结果，所获取的id为1475754982694199298 </p><p>这是因为MyBatis-Plus在实现插入数据时，<strong>会默认基于雪花算法的策略生成id</strong></p><h2 id="3、删除"><a href="#3、删除" class="headerlink" title="3、删除"></a>3、删除</h2><h3 id="a-gt-根据id查询用户信息"><a href="#a-gt-根据id查询用户信息" class="headerlink" title="a&gt;根据id查询用户信息"></a>a&gt;根据id查询用户信息</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过id删除用户信息 </span>    <span class="token comment" spellcheck="true">//DELETE FROM user WHERE id=? </span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>1475754982694199298L<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响行数："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="b-gt-根据多个id查询多个用户信息"><a href="#b-gt-根据多个id查询多个用户信息" class="headerlink" title="b&gt;根据多个id查询多个用户信息"></a>b&gt;根据多个id查询多个用户信息</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteBatchIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过多个id批量删除 </span>    <span class="token comment" spellcheck="true">//DELETE FROM user WHERE id IN ( ? , ? , ? ) </span>    List<span class="token operator">&lt;</span>Long<span class="token operator">></span> idList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> 2L<span class="token punctuation">,</span> 3L<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteBatchIds</span><span class="token punctuation">(</span>idList<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响行数："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="c-gt-通过map条件删除记录"><a href="#c-gt-通过map条件删除记录" class="headerlink" title="c&gt;通过map条件删除记录"></a>c&gt;通过map条件删除记录</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 测试BaseMapper的 添加功能  **/</span><span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据map集合中所设置的条件删除记录 </span>    <span class="token comment" spellcheck="true">//DELETE FROM user WHERE name = ? AND age = ? </span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响行数："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="4、修改"><a href="#4、修改" class="headerlink" title="4、修改"></a>4、修改</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 测试BaseMapper的 修改功能  **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修改用户信息</span>    <span class="token comment" spellcheck="true">// UPDATE user SET name=?, email=? WHERE id=?</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span>setIdƔL<span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">";李四"</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">";lisi@atguigu.com"</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">";user = "</span><span class="token punctuation">;</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="5、查询"><a href="#5、查询" class="headerlink" title="5、查询"></a>5、查询</h2><h3 id="a-gt-根据id查询用户信息-1"><a href="#a-gt-根据id查询用户信息-1" class="headerlink" title="a&gt;根据id查询用户信息"></a>a&gt;根据id查询用户信息</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 测试BaseMapper的 查询功能 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过id查询用户信息</span>    <span class="token comment" spellcheck="true">// SELECT id,name,age,email FROM user WHERE id=?</span>    User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span>selectByIdƑL<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">";user = "</span><span class="token punctuation">;</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="b-gt-根据多个id查询多个用户信息-1"><a href="#b-gt-根据多个id查询多个用户信息-1" class="headerlink" title="b&gt;根据多个id查询多个用户信息"></a>b&gt;根据多个id查询多个用户信息</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectBatchIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据多个id查询多个用户信息</span>    <span class="token comment" spellcheck="true">// SELECT id,name,age,email FROM user WHERE id IN ( ? , ? , ? )</span>    List<span class="token operator">&lt;</span>Long<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span>asListƑL<span class="token punctuation">,</span> 2L<span class="token punctuation">,</span> 3L<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectBatchIds</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="c-gt-通过map条件查询用户信息"><a href="#c-gt-通过map条件查询用户信息" class="headerlink" title="c&gt;通过map条件查询用户信息"></a>c&gt;通过map条件查询用户信息</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据map集合中的条件查询用户信息</span>    <span class="token comment" spellcheck="true">// SELECT id,name,age,email FROM user WHERE name = ? AND age = ?</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="d-gt-查询所有数据"><a href="#d-gt-查询所有数据" class="headerlink" title="d&gt; 查询所有数据"></a>d&gt; 查询所有数据</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 查询所有数据</span>    <span class="token comment" spellcheck="true">// SELECT id,name,age,email FROM user</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>通过观察BaseMapper中的方法，大多方法中都有Wrapper类型的形参，此为条件构造器，<strong>可针对于SQL语句设置不同的条件，若没有条件，则可以为该形参赋值null，即查询（删除/修改）所有数据</strong></p><h3 id="e-gt-自定义功能"><a href="#e-gt-自定义功能" class="headerlink" title="e&gt; 自定义功能"></a>e&gt; 自定义功能</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 根据id查询用户信息为map集合 **/</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">selectMapById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">selectMapById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectMapById"</span> resultType<span class="token operator">=</span><span class="token string">"map"</span><span class="token operator">></span>    select id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>email from t_user where id <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectMapById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"map = "</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="-1"><a href="#-1" class="headerlink" title></a></h2><h2 id="6、通用Service"><a href="#6、通用Service" class="headerlink" title="6、通用Service"></a>6、通用Service</h2><p>通用 Service CRUD 封装<strong>IService</strong>接口，进一步封装 CRUD 采用 <strong>get</strong> 查询单行 <strong>remove</strong> 删 </p><p>除 <strong>list</strong> 查询集合 <strong>page</strong> 分页 前缀命名方式区分 Mapper 层避免混淆， </p><p>泛型 T 为任意实体对象 </p><p>建议如果存在自定义通用 Service 方法的可能，请创建自己的 IBaseService 继承 </p><p>Mybatis-Plus 提供的基类 </p><p><a href="https://baomidou.com/pages/49cc81/#service-crud-%E6%8E%A5%E5%8F%A3">官网地址</a></p><h3 id="a-gt-IService"><a href="#a-gt-IService" class="headerlink" title="a&gt;IService"></a>a&gt;IService</h3><p>MyBatis-Plus中有一个<strong>接口 IService</strong>和<strong>其实现类 ServiceImpl</strong>，<strong>封装了常见的业务层逻辑</strong> </p><p>详情查看源码<strong>IService</strong>和<strong>ServiceImpl</strong></p><h3 id="b-gt-创建Service接口和实现类"><a href="#b-gt-创建Service接口和实现类" class="headerlink" title="b&gt;创建Service接口和实现类"></a>b&gt;创建Service接口和实现类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 接口  UserService继承IService模板提供的基础功能</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实现类</span><span class="token comment" spellcheck="true">/*   ServiceImpl实现了IService，提供了IService中基础功能的实现   若ServiceImpl无法满足业务需求，则可以使用自定的UserService定义方法，   并在实现类中实现*/</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token operator">&lt;</span>UserMapper<span class="token punctuation">,</span> User<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="c-gt-测试查询记录数"><a href="#c-gt-测试查询记录数" class="headerlink" title="c&gt;测试查询记录数"></a>c&gt;测试查询记录数</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 查询总记录数 **/</span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 查询记录数</span>    <span class="token comment" spellcheck="true">// SELECT COUNT( * ) FROM user</span>    <span class="token keyword">long</span> count <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总记录数 = "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="d-gt-测试批量插入"><a href="#d-gt-测试批量插入" class="headerlink" title="d&gt;测试批量插入"></a>d&gt;测试批量插入</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 批量添加的功能 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// SQL长度有限制，海量数据插入单条SQL无法实行，</span>    <span class="token comment" spellcheck="true">// 因此MP将批量插入放在了通用Service中实现，而不是通用Mapper</span>    <span class="token comment" spellcheck="true">// 批量添加</span>    <span class="token comment" spellcheck="true">// INSERT INTO user ( id, name, age ) VALUES ( ?, ?, ? )</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"lxg"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> b <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="四、常用注解"><a href="#四、常用注解" class="headerlink" title="四、常用注解"></a>四、常用注解</h1><h2 id="1、-TableName"><a href="#1、-TableName" class="headerlink" title="1、@TableName"></a>1、@TableName</h2><p>经过以上的测试，在使用MyBatis-Plus实现基本的CRUD时，我们并没有指定要操作的表，只是在 </p><p><strong>Mapper接口继承BaseMapper</strong>时，<strong>设置了泛型User，而操作的表为user表</strong> </p><p>由此得出结论，MyBatis-Plus在<strong>确定操作的表</strong>时，<strong>由BaseMapper的泛型决定</strong>，即实体类型决 </p><p>定，且<strong>默认操作的表名和实体类型的类名一致</strong></p><h3 id="a-gt-问题"><a href="#a-gt-问题" class="headerlink" title="a&gt;问题"></a>a&gt;问题</h3><p>若实体类类型的类名和要操作的表的表名不一致，会出现什么问题？</p><p>我们将表user更名为t_user，测试查询功能 </p><p>程序抛出异常，<strong>Table ‘mybatis_plus.user’ doesn’t exist</strong>，因为现在的表名为t_user，而默认操作 </p><p>的表名和实体类型的类名一致，即user表</p><p><img src="/2022/06/04/Mybatisplus/image7.png" alt="img"></p><h3 id="b-gt-通过-TableName-解决问题"><a href="#b-gt-通过-TableName-解决问题" class="headerlink" title="b&gt;通过@TableName 解决问题"></a>b&gt;通过@TableName 解决问题</h3><p>在实体类类型上添加**@TableName(“t_user”)**，标识实体类对应的表，即可成功执行SQL语句</p><p><img src="/2022/06/04/Mybatisplus/image8.png" alt="img"></p><h3 id="c-gt-通过全局配置解决问题"><a href="#c-gt-通过全局配置解决问题" class="headerlink" title="c&gt;通过全局配置解决问题"></a>c&gt;通过全局配置解决问题</h3><p>在开发的过程中，我们经常遇到以上的问题，即实体类所对应的表都有固定的前缀，例如t_或tbl_ </p><p>此时，可以使用<strong>MyBatis-Plus提供的全局配置</strong>，为实体类所对应的表名设置默认的前缀，那么就 </p><p>不需要在每个实体类上通过**@TableName标识实体类对应的表**</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 配置MyBatis日志</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl  <span class="token comment" spellcheck="true"># 设置MyBatis-Plus的全局配置</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 设置实体类所对应的表的统一前缀</span>      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> t_</code></pre><h2 id="2、-Tableld"><a href="#2、-Tableld" class="headerlink" title="2、@Tableld"></a>2、@Tableld</h2><p>经过以上的测试，<strong>MyBatis-Plus在实现CRUD时，会默认将id作为主键列</strong>，并在插入数据时，<strong>默认</strong> </p><p><strong>基于雪花算法的策略生成id</strong></p><h3 id="a-gt-问题-1"><a href="#a-gt-问题-1" class="headerlink" title="a&gt;问题"></a>a&gt;问题</h3><p>若实体类和表中表示<strong>主键的不是id，而是其他字段</strong>，例如uid，MyBatis-Plus会自动识别uid为主 </p><p>键列吗？ </p><p>我们实体类中的属性id改为uid，将表中的字段id也改为uid，测试添加功能</p><p>程序抛出异常，<strong>Field ‘uid’ doesn’t have a default value</strong>，说明MyBatis-Plus没有将uid作为主键 </p><p>赋值</p><p><img src="/2022/06/04/Mybatisplus/image9.png" alt="img"></p><h3 id="b-gt-通过-TableId解决问题"><a href="#b-gt-通过-TableId解决问题" class="headerlink" title="b&gt;通过@TableId解决问题"></a><strong>b&gt;通过@TableId解决问题</strong></h3><p>在实体类中uid属性上通过**@TableId**将其标识为主键，即可成功执行SQL语句</p><p><img src="/2022/06/04/Mybatisplus/image10.png" alt="img"></p><h3 id="c-gt-TableId的value属性"><a href="#c-gt-TableId的value属性" class="headerlink" title="c&gt;@TableId的value属性"></a><strong>c&gt;@TableId的value属性</strong></h3><p>若实体类中主键对应的属性为id，而表中表示主键的字段为uid，此时若只在属性id上添加注解 </p><p><strong>@TableId</strong>，则抛出异常**Unknown column ‘id’ in ‘field list’**，即MyBatis-Plus仍然会将id作为表的 </p><p>主键操作，而表中表示主键的是字段uid </p><p>此时需要通过**@TableId注解的value属性，指定表中的主键字段**，@TableId(“uid”)或 </p><p><strong>@TableId(value=”uid”)</strong></p><p><img src="/2022/06/04/Mybatisplus/image11.png" alt="img"></p><h3 id="d-gt-Tableld的type属性"><a href="#d-gt-Tableld的type属性" class="headerlink" title="d&gt;@Tableld的type属性"></a>d&gt;@Tableld的type属性</h3><p>type属性用来定义主键策略</p><h4 id="常用的主键策略："><a href="#常用的主键策略：" class="headerlink" title="常用的主键策略："></a>常用的主键策略：</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26045818/1646267160557-739e631c-0f8c-4ade-9ffc-ea6a7bf177dd.png" alt="img"></p><h4 id="配置全局主键策略："><a href="#配置全局主键策略：" class="headerlink" title="配置全局主键策略："></a>配置全局主键策略：</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 加入日志功能</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl  <span class="token comment" spellcheck="true"># 设置MyBatis-Plus的全局配置</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 设置实体类所对应的表的统一前缀</span>      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> t_      <span class="token comment" spellcheck="true"># 设置统一的主键生成策略</span>      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto</code></pre><h3 id="e-gt-雪花算法"><a href="#e-gt-雪花算法" class="headerlink" title="e&gt;雪花算法"></a>e&gt;雪花算法</h3><h4 id="背景"><a href="#背景" class="headerlink" title="- 背景"></a>- 背景</h4><p>需要选择合适的方案去应对数据规模的增长，以应对<strong>逐渐增长的访问压力和数据量</strong>。 </p><p>数据库的扩展方式主要包括：业务分库、主从复制，数据库分表。</p><h4 id="数据库分表"><a href="#数据库分表" class="headerlink" title="- 数据库分表"></a>- 数据库分表</h4><p>将不同业务数据分散存储到不同的数据库服务器，能够支撑百万甚至千万用户规模的业务，但如果业务 </p><p>继续发展，同一业务的单表数据也会达到单台数据库服务器的处理瓶颈。例如，淘宝的几亿用户数据， </p><p>如果全部存放在一台数据库服务器的一张表中，肯定是无法满足性能要求的，此时就需要对单表数据进 </p><p>行拆分。 </p><p>单表数据拆分有两种方式：<strong>垂直分表和水平分表</strong>。示意图如下：</p><p><img src="/2022/06/04/Mybatisplus/image12.png" alt="img"></p><h5 id="垂直分表"><a href="#垂直分表" class="headerlink" title="- 垂直分表"></a>- 垂直分表</h5><p>垂直分表适合将表中某些不常用且占了大量空间的列拆分出去。 </p><p>例如，前面示意图中的 nickname 和 description 字段，假设我们是一个婚恋网站，用户在筛选其他用 </p><p>户的时候，主要是用 age 和 sex 两个字段进行查询，而 nickname 和 description 两个字段主要用于展 </p><p>示，一般不会在业务查询中用到。description 本身又比较长，因此我们可以将这两个字段独立到另外 </p><p>一张表中，这样在查询 age 和 sex 时，就能带来一定的性能提升。</p><h5 id="水平分表"><a href="#水平分表" class="headerlink" title="- 水平分表"></a>- 水平分表</h5><p>水平分表适合表行数特别大的表，有的公司要求单表行数超过 5000 万就必须进行分表，这个数字可以 </p><p>作为参考，但并不是绝对标准，关键还是要看表的访问性能。对于一些比较复杂的表，可能超过 1000 </p><p>万就要分表了；而对于一些简单的表，即使存储数据超过 1 亿行，也可以不分表。 </p><p>但不管怎样，当看到表的数据量达到千万级别时，作为架构师就要警觉起来，因为这很可能是架构的性 </p><p>能瓶颈或者隐患。 </p><p>水平分表相比垂直分表，会引入更多的复杂性，例如要求全局唯一的数据id该如何处</p><p><strong>主键自增</strong></p><p>①以最常见的用户 ID 为例，可以按照 1000000 的范围大小进行分段，1 ~ 999999 放到表 1中， </p><p>1000000 ~ 1999999 放到表2中，以此类推。 </p><p>②<strong>复杂点</strong>：分段大小的选取。分段太小会导致切分后子表数量过多，增加维护复杂度；分段太大可能会 </p><p>导致单表依然存在性能问题，一般建议分段大小在 100 万至 2000 万之间，具体需要根据业务选取合适 </p><p>的分段大小。 </p><p>③<strong>优点</strong>：可以随着数据的增加平滑地扩充新的表。例如，现在的用户是 100 万，如果增加到 1000 万， </p><p>只需要增加新的表就可以了，原有的数据不需要动。 </p><p>④<strong>缺点</strong>：分布不均匀。假如按照 1000 万来进行分表，有可能某个分段实际存储的数据量只有 1 条，而 </p><p>另外一个分段实际存储的数据量有 1000 万条。</p><p><strong>取模</strong></p><p>①同样以用户 ID 为例，假如我们一开始就规划了 10 个数据库表，可以简单地用 user_id % 10 的值来 </p><p>表示数据所属的数据库表编号，ID 为 985 的用户放到编号为 5 的子表中，ID 为 10086 的用户放到编号 </p><p>为 6 的子表中。 </p><p>②<strong>复杂点</strong>：初始表数量的确定。表数量太多维护比较麻烦，表数量太少又可能导致单表性能存在问题。 </p><p>③<strong>优点</strong>：表分布比较均匀。 </p><p>④<strong>缺点</strong>：扩充新的表很麻烦，所有数据都要重分布。</p><p><strong>雪花算法</strong></p><p>雪花算法是由Twitter公布的分布式主键生成算法，它能够保证不同表的主键的不重复性，以及相同表的 </p><p>主键的有序性。 </p><p>①<strong>核心思想：</strong> </p><p>长度共64bit（一个long型）。 </p><p>首先是一个符号位，1bit标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负 </p><p>数是1，所以id一般是正数，最高位是0。 </p><p>41bit时间截(毫秒级)，存储的是时间截的差值（当前时间截 - 开始时间截)，结果约等于69.73年。 </p><p>10bit作为机器的ID（</p><p>5个bit是数据中心，5个bit的机器ID，可以部署在1024个节点）。 </p><p>12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID）。</p><p><img src="/2022/06/04/Mybatisplus/image13.png" alt="img"></p><p>②<strong>优点</strong>：整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞，并且效率较高。</p><h2 id="3、-TableField"><a href="#3、-TableField" class="headerlink" title="3、@TableField"></a>3、@TableField</h2><p>经过以上的测试，我们可以发现，MyBatis-Plus在执行SQL语句时，要保证实体类中的属性名和表中的字段名一致 </p><p>如果<strong>实体类中的属性名和字段名不一致的情况</strong>，会出现什么问题呢？</p><h3 id="a-gt-情况1"><a href="#a-gt-情况1" class="headerlink" title="a&gt;情况1"></a>a&gt;情况1</h3><p>若实体类中的属性使用的是驼峰命名风格，而表中的字段使用的是下划线命名风格 </p><p>例如实体类属性userName，表中字段user_name </p><p>此时<strong>MyBatis-Plus会自动将下划线命名风格转化为驼峰命名风格</strong> </p><p>相当于在MyBatis中配置</p><h3 id="a-gt-情况2"><a href="#a-gt-情况2" class="headerlink" title="a&gt;情况2"></a>a&gt;情况2</h3><p>若实体类中的属性和表中的字段不满足情况1 </p><p>例如实体类属性name，表中字段username </p><p>此时需要在实体类属性上使用**@TableField(“username”)<strong>设置</strong>属性所对应的字段名**</p><p><img src="/2022/06/04/Mybatisplus/image14.png" alt="img"></p><h2 id="4、-TableLogic"><a href="#4、-TableLogic" class="headerlink" title="4、@TableLogic"></a>4、@TableLogic</h2><h3 id="a-gt-逻辑删除"><a href="#a-gt-逻辑删除" class="headerlink" title="a&gt;逻辑删除"></a>a&gt;逻辑删除</h3><ul><li>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除的数据 </li><li><strong>逻辑删除</strong>：假删除，<strong>将对应数据中代表是否被删除字段的状态修改为“被删除状态”</strong>，之后在数据库 </li></ul><p>中仍旧能看到此条数据记录 </p><ul><li>使用场景：可以进行数据恢复</li></ul><h3 id="b-gt-实现逻辑删除"><a href="#b-gt-实现逻辑删除" class="headerlink" title="b&gt;实现逻辑删除"></a>b&gt;实现逻辑删除</h3><p><strong>step1：****数据库中创建逻辑删除状态列，设置默认值为0</strong></p><p><img src="/2022/06/04/Mybatisplus/image15.png" alt="img"></p><p><strong>step2：</strong>实体类中添加逻辑删除属性</p><p><img src="/2022/06/04/Mybatisplus/image16.png" alt="img"></p><p><strong>step3****：</strong>测试 </p><p>测试删除功能，真正执行的是修改 </p><p><strong>UPDATE t_user SET is_deleted=1 WHERE id=? AND is_deleted=0</strong> </p><p>测试查询功能，被逻辑删除的数据默认不会被查询 </p><p><strong>SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted=0</strong></p><h1 id="五、条件构造器和常用接口"><a href="#五、条件构造器和常用接口" class="headerlink" title="五、条件构造器和常用接口"></a>五、条件构造器和常用接口</h1><h2 id="1、wrapper介绍"><a href="#1、wrapper介绍" class="headerlink" title="1、wrapper介绍"></a>1、wrapper介绍</h2><p><img src="/2022/06/04/Mybatisplus/image17.png" alt="img"></p><p>Wrapper ： <strong>条件构造抽象类</strong>，最顶端父类 </p><ul><li><p>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件 </p></li><li><ul><li>QueryWrapper ： 查询条件封装 </li><li>UpdateWrapper ： Update 条件封装 </li><li>AbstractLambdaWrapper ： 使用Lambda 语法 </li></ul></li><li><ul><li><ul><li>LambdaQueryWrapper ：用于Lambda语法使用的查询Wrapper </li><li>LambdaUpdateWrapper ： Lambda 更新封装Wrapper</li></ul></li></ul></li></ul><h2 id="2、QueryWrapper"><a href="#2、QueryWrapper" class="headerlink" title="2、QueryWrapper"></a>2、QueryWrapper</h2><h3 id="a-gt-例1：组装查询条件"><a href="#a-gt-例1：组装查询条件" class="headerlink" title="a&gt;例1：组装查询条件"></a>a&gt;例1：组装查询条件</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 查询用户包含a,年龄在20到30之间，邮箱信息不为null的用户信息 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user        WHERE is_deleted=0 AND (user_name LIKE ?        AND age BETWEEN ? AND ? AND email IS NOT NULL)     */</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="b-gt-例2：组装排序条件"><a href="#b-gt-例2：组装排序条件" class="headerlink" title="b&gt;例2：组装排序条件"></a>b&gt;例2：组装排序条件</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 组装排序条件 查询用户信息，按照年龄的降序排序，若年龄相同，则按照id升序排序 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user        WHERE is_deleted=0 ORDER BY age DESC,uid ASC     */</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="c-gt-例3：组装删除条件"><a href="#c-gt-例3：组装删除条件" class="headerlink" title="c&gt;例3：组装删除条件"></a>c&gt;例3：组装删除条件</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 组装删除条件 删除邮箱地址为null的用户信息 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        UPDATE t_user SET is_deleted=1 WHERE is_deleted=0 AND (email IS NOT NULL)     */</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="d-gt-例4：条件的优先级"><a href="#d-gt-例4：条件的优先级" class="headerlink" title="d&gt;例4：条件的优先级"></a>d&gt;例4：条件的优先级</h3><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/** 组装修改条件  将(年龄大于20并且用户名中包含有a)或邮箱为null的用户信息修改 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        UPDATE t_user SET user_name=?, email=?        WHERE is_deleted=0 AND (age > ? AND user_name LIKE ? OR email IS NOT NULL)     */</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"test@atguigu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 条件优先级  将用户名中包含a并且(年龄大于20或邮箱为null)的用户信息修改 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// lambda中条件优先级</span>    <span class="token comment" spellcheck="true">/*        UPDATE t_user SET user_name=?, email=?        WHERE is_deleted=0 AND (user_name LIKE ? AND (age > ? OR email IS NULL))     */</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> i<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"test@atguigu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="e-gt-例5：组装select子句"><a href="#e-gt-例5：组装select子句" class="headerlink" title="e&gt;例5：组装select子句"></a>e&gt;例5：组装select子句</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 组装select字句 查询用户名的用户名、年龄、邮箱信息 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        SELECT user_name,age,email FROM t_user WHERE is_deleted=0     */</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectMaps</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="f-gt-例6：实现子查询"><a href="#f-gt-例6：实现子查询" class="headerlink" title="f&gt;例6：实现子查询"></a>f&gt;例6：实现子查询</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 组装子查询 查询id小于100的用户信息**/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test07</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user        WHERE is_deleted=0 AND (uid IN (select uid from t_user where uid &lt;= 100))     */</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">inSql</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">,</span> <span class="token string">"select uid from t_user where uid &lt;= 100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="3、UpdateWrapper"><a href="#3、UpdateWrapper" class="headerlink" title="3、UpdateWrapper"></a>3、UpdateWrapper</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 使用UpdateWrapper实现修改功能 将用户名中包含a并且(年龄大于20或邮箱为null)的用户信息修改 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test08</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        UPDATE t_user SET user_name=?,email=?        WHERE is_deleted=0 AND (user_name LIKE ? AND (age > ? OR email IS NULL))     */</span>    UpdateWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> updateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> i<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateWrapper<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">,</span> <span class="token string">"小黑"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span> <span class="token string">"abc@atguigu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="4、Condition"><a href="#4、Condition" class="headerlink" title="4、Condition"></a>4、Condition</h2><p>在真正开发的过程中，组装条件是常见的功能，<strong>而这些条件数据来源于用户输入，是可选的，因此我们在组装这些条件时，必须先判断用户是否选择了这些条件</strong>，若选择则需要组装该条件，若 </p><p>没有选择则一定不能组装，以免影响SQL执行的结果</p><h3 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 模拟开发中组装条件的情况  **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test09</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user        WHERE is_deleted=0 AND (user_name LIKE ? AND age &lt;= ?)     */</span>    String username <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    Integer ageBegin <span class="token operator">=</span> null<span class="token punctuation">;</span>    Integer ageEnd <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// isNotBlank判断某个字符串是否不为空字符串、不为null、不为空白符</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ageBegin <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> ageBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ageEnd <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> ageEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h3><p>上面的实现方案没有问题，但是代码比较复杂，我们可以使用带condition参数的重载方法构建查询条件<strong>，****简化代码的编写</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 使用condition组装条件 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test10</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user        WHERE is_deleted=0 AND (user_name LIKE ? AND age &lt;= ?)     */</span>    String username <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    Integer ageBegin <span class="token operator">=</span> null<span class="token punctuation">;</span>    Integer ageEnd <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"user_name"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span>ageBegin <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> ageBegin<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span>ageEnd <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> ageEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="5、LambdaQueryWrapper"><a href="#5、LambdaQueryWrapper" class="headerlink" title="5、LambdaQueryWrapper"></a>5、LambdaQueryWrapper</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** LambdaQueryWrapper **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test11</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user        WHERE is_deleted=0 AND (user_name LIKE ? AND age &lt;= ?)     */</span>    String username <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    Integer ageBegin <span class="token operator">=</span> null<span class="token punctuation">;</span>    Integer ageEnd <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//组装set子句</span>    LambdaQueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//避免使用字符串表示字段，防止运行时错误</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">,</span> User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">,</span> username<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span>ageBegin <span class="token operator">!=</span> null<span class="token punctuation">,</span> User<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">,</span> ageBegin<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span>ageEnd <span class="token operator">!=</span> null<span class="token punctuation">,</span> User<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">,</span> ageEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="6、LambdaUpdateWrapper"><a href="#6、LambdaUpdateWrapper" class="headerlink" title="6、LambdaUpdateWrapper"></a>6、LambdaUpdateWrapper</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** LambdaUpdateWrapper **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test12</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        UPDATE t_user SET user_name=?,email=?        WHERE is_deleted=0 AND (user_name LIKE ? AND (age > ? OR email IS NULL))     */</span>    LambdaUpdateWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> updateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaUpdateWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//lambda表达式内的逻辑优先运算</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> i<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getEmail<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     updateWrapper<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">,</span> <span class="token string">"小黑"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getEmail<span class="token punctuation">,</span> <span class="token string">"abc@atguigu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="六、插件"><a href="#六、插件" class="headerlink" title="六、插件"></a>六、插件</h1><h2 id="1、分页插件"><a href="#1、分页插件" class="headerlink" title="1、分页插件"></a>1、分页插件</h2><p>MyBatis Plus自带分页插件，只要简单的配置即可实现分页功能</p><h3 id="a-gt-添加配置类"><a href="#a-gt-添加配置类" class="headerlink" title="a&gt;添加配置类"></a>a&gt;添加配置类</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"scan.your.mapper.package"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MybatisPlusInterceptor <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MybatisPlusInterceptor interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>H2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ConfigurationCustomizer <span class="token function">configurationCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> configuration <span class="token operator">-</span><span class="token operator">></span> configuration<span class="token punctuation">.</span><span class="token function">setUseDeprecatedExecutor</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="b-gt-测试"><a href="#b-gt-测试" class="headerlink" title="b&gt;测试"></a>b&gt;测试</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> ProductMapper productMapper<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** MyBatis-Plus分页插件的配置和使用和分页相关数据的获取 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user        WHERE is_deleted=0 LIMIT ?     */</span>    Page<span class="token operator">&lt;</span>User<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总页数:"</span>  <span class="token operator">+</span> page<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总记录数"</span> <span class="token operator">+</span> page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否有上一页"</span> <span class="token operator">+</span> page<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否有下一页:"</span> <span class="token operator">+</span> page<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>测试结果：</p><p>[User(id=1, name=Jone, age=18, email=<a href="mailto:&#116;&#101;&#115;&#x74;&#49;&#64;&#98;&#x61;&#111;&#x6d;&#x69;&#x64;&#111;&#x75;&#x2e;&#99;&#x6f;&#x6d;">&#116;&#101;&#115;&#x74;&#49;&#64;&#98;&#x61;&#111;&#x6d;&#x69;&#x64;&#111;&#x75;&#x2e;&#99;&#x6f;&#x6d;</a>, sex=null, isDeleted=0), User(id=2, name=Jack, age=18, email=<a href="mailto:&#x74;&#x65;&#115;&#x74;&#x32;&#x40;&#x62;&#97;&#x6f;&#109;&#x69;&#x64;&#111;&#117;&#x2e;&#x63;&#x6f;&#109;">&#x74;&#x65;&#115;&#x74;&#x32;&#x40;&#x62;&#97;&#x6f;&#109;&#x69;&#x64;&#111;&#117;&#x2e;&#x63;&#x6f;&#109;</a>, sex=null, isDeleted=0), User(id=3, name=Tom, age=18, email=<a href="mailto:&#116;&#x65;&#115;&#x74;&#51;&#64;&#x62;&#x61;&#x6f;&#x6d;&#105;&#100;&#111;&#117;&#x2e;&#x63;&#111;&#109;">&#116;&#x65;&#115;&#x74;&#51;&#64;&#x62;&#x61;&#x6f;&#x6d;&#105;&#100;&#111;&#117;&#x2e;&#x63;&#111;&#109;</a>, sex=null, isDeleted=0)]</p><p>总页数:3</p><p>总记录数8</p><p>是否有上一页true</p><p>是否有下一页:false</p><h2 id="2、xml自定义分页"><a href="#2、xml自定义分页" class="headerlink" title="2、xml自定义分页"></a>2、xml自定义分页</h2><h3 id="a-gt-UserMapper中定义接口方法"><a href="#a-gt-UserMapper中定义接口方法" class="headerlink" title="a&gt;UserMapper中定义接口方法"></a>a&gt;UserMapper中定义接口方法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 根据年龄查询用户列表，分页显示* @param page 分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位 * @param age 年龄* @return*/</span>Page<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectPageVo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> Page<span class="token operator">&lt;</span>User<span class="token operator">></span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> Integer age<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="b-gt-UserMapper-xml中编写SQL"><a href="#b-gt-UserMapper-xml中编写SQL" class="headerlink" title="b&gt;UserMapper.xml中编写SQL"></a>b&gt;UserMapper.xml中编写SQL</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>Page<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectPageVo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> Page<span class="token operator">&lt;</span>User<span class="token operator">></span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> Integer age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectPageVo"</span> resultType<span class="token operator">=</span><span class="token string">"User"</span><span class="token operator">></span>    select uid as `id`<span class="token punctuation">,</span>user_name as `name`<span class="token punctuation">,</span>age<span class="token punctuation">,</span>email from t_user where age <span class="token operator">></span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>age<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre><h3 id="c-gt-测试"><a href="#c-gt-测试" class="headerlink" title="c&gt;测试"></a>c&gt;测试</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectPageVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置分页参数</span>    Page<span class="token operator">&lt;</span>User<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     userMapper<span class="token punctuation">.</span><span class="token function">selectPageVo</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取分页数据</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前页:"</span><span class="token operator">+</span>page<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每页显示的条数:"</span><span class="token operator">+</span>page<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总记录数:"</span><span class="token operator">+</span>page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总页数:"</span><span class="token operator">+</span>page<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否有上一页:"</span><span class="token operator">+</span>page<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否有下一页:"</span><span class="token operator">+</span>page<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>User(id=3, name=Tom, age=28, email=<a href="mailto:&#116;&#101;&#115;&#116;&#51;&#64;&#x62;&#x61;&#111;&#x6d;&#105;&#x64;&#x6f;&#x75;&#x2e;&#99;&#x6f;&#x6d;">&#116;&#101;&#115;&#116;&#51;&#64;&#x62;&#x61;&#111;&#x6d;&#105;&#x64;&#x6f;&#x75;&#x2e;&#99;&#x6f;&#x6d;</a>, isDeleted=null) User(id=4, </p><p>name=Sandy, age=21, email=<a href="mailto:&#116;&#x65;&#115;&#116;&#x34;&#64;&#x62;&#97;&#111;&#109;&#x69;&#100;&#x6f;&#x75;&#x2e;&#x63;&#x6f;&#109;">&#116;&#x65;&#115;&#116;&#x34;&#64;&#x62;&#97;&#111;&#109;&#x69;&#100;&#x6f;&#x75;&#x2e;&#x63;&#x6f;&#109;</a>, isDeleted=null) User(id=5, name=Billie, </p><p>age=24, email=<a href="mailto:&#116;&#101;&#115;&#116;&#53;&#x40;&#98;&#x61;&#111;&#x6d;&#105;&#100;&#111;&#x75;&#46;&#99;&#x6f;&#109;">&#116;&#101;&#115;&#116;&#53;&#x40;&#98;&#x61;&#111;&#x6d;&#105;&#100;&#111;&#x75;&#46;&#99;&#x6f;&#109;</a>, isDeleted=null) User(id=8, name=ybc1, age=21, </p><p>email=null, isDeleted=null) User(id=9, name=ybc2, age=22, email=null, isDeleted=null) </p><p>当前页：1 每页显示的条数：5 总记录数：12 总页数：3 是否有上一页：false 是否有下一页：true</p><h2 id="3、乐观锁"><a href="#3、乐观锁" class="headerlink" title="3、乐观锁"></a>3、乐观锁</h2><h3 id="a-gt-场景"><a href="#a-gt-场景" class="headerlink" title="a&gt;场景"></a>a&gt;场景</h3><p>一件商品，成本价是80元，售价是100元。老板先是通知小李，说你去把商品价格增加50元。小 </p><p>李正在玩游戏，耽搁了一个小时。正好一个小时后，老板觉得商品价格增加到150元，价格太 </p><p>高，可能会影响销量。又通知小王，你把商品价格降低30元。 </p><p>此时，小李和小王同时操作商品后台系统。小李操作的时候，系统先取出商品价格100元；小王 </p><p>也在操作，取出的商品价格也是100元。小李将价格加了50元，并将100+50=150元存入了数据 </p><p>库；小王将商品减了30元，并将100-30=70元存入了数据库。是的，如果没有锁，小李的操作就 </p><p>完全被小王的覆盖了。 </p><p>现在商品价格是70元，比成本价低10元。几分钟后，这个商品很快出售了1千多件商品，老板亏1 </p><p>万多。</p><h3 id="b-gt-乐观锁和悲观锁"><a href="#b-gt-乐观锁和悲观锁" class="headerlink" title="b&gt;乐观锁和悲观锁"></a>b&gt;乐观锁和悲观锁</h3><p>上面的故事，如果是乐观锁，小王保存价格前，会检查下价格是否被人修改过了。如果被修改过了，则重新取出的被修改后的价格，150元，这样他会将120元存入数据库。 </p><p>如果是悲观锁，小李取出数据后，小王只能等小李操作完之后，才能对价格进行操作，也会保证 </p><p>最终的价格是120元。</p><h3 id="c-gt-模拟修改冲突"><a href="#c-gt-模拟修改冲突" class="headerlink" title="c&gt;模拟修改冲突"></a>c&gt;模拟修改冲突</h3><h4 id="数据库中增加商品表"><a href="#数据库中增加商品表" class="headerlink" title="数据库中增加商品表"></a>数据库中增加商品表</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_product<span class="token punctuation">(</span>id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品名称'</span><span class="token punctuation">,</span> price <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'价格'</span><span class="token punctuation">,</span>VERSION <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'乐观锁版本号'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_product <span class="token punctuation">(</span>id<span class="token punctuation">,</span> NAME<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'外星人笔记本'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="添加实体"><a href="#添加实体" class="headerlink" title="添加实体"></a>添加实体</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>entity<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer price<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer version<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="添加mapper"><a href="#添加mapper" class="headerlink" title="添加mapper"></a>添加mapper</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>Product<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testProduct01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1.小李查询商品价格</span>    Product productLi <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小李查询的商品价格:"</span> <span class="token operator">+</span> productLi<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.小王查询商品价格</span>    Product productWang <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小王查询的商品价格:"</span> <span class="token operator">+</span> productWang<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3.小李商品价格+50</span>    productLi<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>productLi<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    productMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>productLi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4.小王将商品价格-30</span>    productWang<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>productWang<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>productWang<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5.老板查询商品价格</span>    Product productBoss <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老板查询的商品价格:"</span> <span class="token operator">+</span> productBoss<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="d-gt-乐观锁实现流程"><a href="#d-gt-乐观锁实现流程" class="headerlink" title="d&gt;乐观锁实现流程"></a>d&gt;乐观锁实现流程</h3><p>数据库中<strong>添加version字段</strong></p><p><strong>取出记录时，获取当前version</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span>price<span class="token punctuation">,</span><span class="token punctuation">`</span>version<span class="token punctuation">`</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span></code></pre><p>更新时，version + 1，如果where语句中的version版本不对，则更新失败</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> product <span class="token keyword">SET</span> price<span class="token operator">=</span>price<span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>version<span class="token punctuation">`</span><span class="token operator">=</span><span class="token punctuation">`</span>version<span class="token punctuation">`</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span><span class="token punctuation">`</span>version<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">1</span></code></pre><h3 id="e-gt-MyBatis-Plus实现乐观锁"><a href="#e-gt-MyBatis-Plus实现乐观锁" class="headerlink" title="e&gt;MyBatis-Plus实现乐观锁"></a>e&gt;MyBatis-Plus实现乐观锁</h3><h4 id="修改实体类"><a href="#修改实体类" class="headerlink" title="修改实体类"></a>修改实体类</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer price<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Version</span> <span class="token comment" spellcheck="true">// 设置乐观锁版本号字段</span>    <span class="token keyword">private</span> Integer version<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="添加乐观锁插件配置"><a href="#添加乐观锁插件配置" class="headerlink" title="添加乐观锁插件配置"></a>添加乐观锁插件配置</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">// 扫描mapper接口所在的包</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.mybatisplus.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">myBatisPlusConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 添加MyBatisPlus分页插件 **/</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MybatisPlusInterceptor <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MybatisPlusInterceptor interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加分页插件</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加乐观锁插件</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="测试修改冲突"><a href="#测试修改冲突" class="headerlink" title="测试修改冲突"></a>测试修改冲突</h4><p>小李查询商品信息:</p><p>SELECT id,name,price,version FROM t_product WHERE id=?</p><p>小王查询商品信息:</p><p>SELECT id,name,price,version FROM t_product WHERE id=? </p><p>小李修改商品价格，自动将version+1</p><p>UPDATE t_product SET name=?, price=?, version=? WHERE id=? AND version=? Parameters: 外星人笔记本(String), 150(Integer), 1(Integer), 1(Long), 0(Integer) </p><p>小王修改商品价格，此时version已更新，条件不成立，修改失败</p><p>UPDATE t_product SET name=?, price=?, version=? WHERE id=? AND version=? Parameters: 外星人笔记本(String), 70(Integer), 1(Integer), 1(Long), 0(Integer) </p><p>最终，小王修改失败，查询价格:150</p><p>SELECT id,name,price,version FROM t_product WHERE id=?</p><h4 id="优化流程"><a href="#优化流程" class="headerlink" title="优化流程"></a>优化流程</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testProduct01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1.小李查询商品价格</span>    Product productLi <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小李查询的商品价格:"</span> <span class="token operator">+</span> productLi<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.小王查询商品价格</span>    Product productWang <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小王查询的商品价格:"</span> <span class="token operator">+</span> productWang<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3.小李商品价格+50</span>    productLi<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>productLi<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    productMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>productLi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4.小王将商品价格-30</span>    productWang<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>productWang<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>productWang<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 操作失败,重试</span>        Product productNew <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productNew<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>productNew<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>productNew<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5.老板查询商品价格</span>    Product productBoss <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老板查询的商品价格:"</span> <span class="token operator">+</span> productBoss<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="七、通过枚举"><a href="#七、通过枚举" class="headerlink" title="七、通过枚举"></a>七、通过枚举</h1><p>表中的有些<strong>字段值是固定的</strong>，例如性别(男或女)，此时我们可以使用MyBatis-Plus的通用枚举 来实现</p><h2 id="a-gt-数据库表添加字段sex"><a href="#a-gt-数据库表添加字段sex" class="headerlink" title="a&gt;数据库表添加字段sex"></a>a&gt;数据库表添加字段sex</h2><p><img src="/2022/06/04/Mybatisplus/image18.png" alt="img"></p><h3 id="b-gt-创建通过枚举类型"><a href="#b-gt-创建通过枚举类型" class="headerlink" title="b&gt;创建通过枚举类型"></a>b&gt;创建通过枚举类型</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span> <span class="token comment" spellcheck="true">// 因为枚举里面都是常量</span><span class="token keyword">public</span> <span class="token keyword">enum</span> SexEnum <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">MALE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FEMALE</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@EnumValue</span> <span class="token comment" spellcheck="true">// 将注解所标识的属性的值存储到数据库中</span>    <span class="token keyword">private</span> Integer sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sexName<span class="token punctuation">;</span>    <span class="token function">SexEnum</span><span class="token punctuation">(</span>Integer sex<span class="token punctuation">,</span> String sexName<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sexName <span class="token operator">=</span> sexName<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="c-gt-配置扫描通过枚举"><a href="#c-gt-配置扫描通过枚举" class="headerlink" title="c&gt;配置扫描通过枚举"></a>c&gt;配置扫描通过枚举</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 加入日志功能</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl  <span class="token comment" spellcheck="true"># 设置MyBatis-Plus的全局配置</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 设置实体类所对应的表的统一前缀</span>      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> t_      <span class="token comment" spellcheck="true"># 设置统一的主键生成策略</span>      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto  <span class="token comment" spellcheck="true"># 配置类型别名所对应的包</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.atguigu.mybatisplus.pojo  <span class="token comment" spellcheck="true"># 扫描枚举的包</span>  <span class="token key atrule">type-enums-package</span><span class="token punctuation">:</span> com.atguigu.mybatisplus.enums</code></pre><h3 id="d-gt-测试"><a href="#d-gt-测试" class="headerlink" title="d&gt;测试"></a>d&gt;测试</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusEnumTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span>SexEnum<span class="token punctuation">.</span>MALE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="-2"><a href="#-2" class="headerlink" title></a></h1><h1 id="八、代码生成器"><a href="#八、代码生成器" class="headerlink" title="八、代码生成器"></a>八、代码生成器</h1><h2 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="2、快速生成"><a href="#2、快速生成" class="headerlink" title="2、快速生成"></a>2、快速生成</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastAutoGeneratorTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置我们需要创建在哪的路径</span>        String path <span class="token operator">=</span> <span class="token string">"/Users/luxiaogen/Documents/RoadTo2w/Java/尚硅谷/MyBatisPlus-2022/demo"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里我是mysql8 5版本可以换成 jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span>        FastAutoGenerator<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">globalConfig</span><span class="token punctuation">(</span>builder <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    builder<span class="token punctuation">.</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"atguigu"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置作者</span>                    <span class="token comment" spellcheck="true">// .enableSwagger() // 开启 swagger 模式</span>                    <span class="token punctuation">.</span><span class="token function">fileOverride</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 覆盖已生成文件</span>                    <span class="token punctuation">.</span><span class="token function">outputDir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指定输出目录</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">packageConfig</span><span class="token punctuation">(</span>builder <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    builder<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token string">"com.atguigu"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置父包名</span>                            <span class="token punctuation">.</span><span class="token function">moduleName</span><span class="token punctuation">(</span><span class="token string">"mybatisplus"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置父包模块名</span>                            <span class="token punctuation">.</span><span class="token function">pathInfo</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span>OutputFile<span class="token punctuation">.</span>mapperXml<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置mapperXml生成路径</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">strategyConfig</span><span class="token punctuation">(</span>builder <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    builder<span class="token punctuation">.</span><span class="token function">addInclude</span><span class="token punctuation">(</span><span class="token string">"t_user"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置需要生成的表名</span>                            <span class="token punctuation">.</span><span class="token function">addTablePrefix</span><span class="token punctuation">(</span><span class="token string">"t_"</span><span class="token punctuation">,</span> <span class="token string">"c_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置过滤表前缀</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">templateEngine</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FreemarkerTemplateEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 使用Freemarker 引擎模板，默认的是Velocity引擎模板</span>                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>点击运行</p><p><img src="/2022/06/04/Mybatisplus/image19.png" alt="img"></p><h1 id="九、多数据源"><a href="#九、多数据源" class="headerlink" title="九、多数据源"></a>九、多数据源</h1><p>适用于多种场景:纯粹多库、 读写分离、 一主多从、 混合模式等 目前我们就来模拟一个纯粹多库的一个场景，其他场景类似 </p><p>场景说明:</p><p>我们创建两个库，分别为:mybatis_plus(以前的库不动)与mybatis_plus_1(新建)，将 mybatis_plus库的product表移动到mybatis_plus_1库，这样每个库一张表，通过一个测试用例 分别获取用户数据与商品数据，如果获取到说明多库模拟成功</p><h2 id="1、创建数据库及表"><a href="#1、创建数据库及表" class="headerlink" title="1、创建数据库及表"></a>1、创建数据库及表</h2><p>创建数据库mybatis_plus_1和表product</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">`</span>mybatis_plus_1<span class="token punctuation">`</span> <span class="token comment" spellcheck="true">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token punctuation">`</span>mybatis_plus_1<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product<span class="token punctuation">(</span>id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品名称'</span><span class="token punctuation">,</span> price <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'价格'</span><span class="token punctuation">,</span>version <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'乐观锁版本号'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>添加测试数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token punctuation">(</span>id<span class="token punctuation">,</span> NAME<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'外星人笔记本'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>删除mybatis_plus库product表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">use</span> mybatis_plus<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> product<span class="token punctuation">;</span></code></pre><h2 id="2、引入依赖"><a href="#2、引入依赖" class="headerlink" title="2、引入依赖"></a>2、引入依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--MyBatis-plus启动器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--lombok用于简化实体类开发--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--mysql驱动--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--多数据源依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dynamic-datasource-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="3、配置多数据源"><a href="#3、配置多数据源" class="headerlink" title="3、配置多数据源"></a>3、配置多数据源</h2><p>说明:注释掉之前的数据库连接，添加新配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 配置数据源信息 datasource:</span>    <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 设置默认的数据源或者数据源组,默认值即为master</span>      <span class="token key atrule">primary</span><span class="token punctuation">:</span> master      <span class="token comment" spellcheck="true"># 严格匹配数据源,默认false.true未匹配到指定数据源时抛异常,false使用默认数据源</span>      <span class="token key atrule">strict</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">master</span><span class="token punctuation">:</span>          <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis_plus<span class="token punctuation">?</span>serverTimezone=GMT%2B8<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver          <span class="token key atrule">username</span><span class="token punctuation">:</span> root          <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">'root'</span>        <span class="token key atrule">slave_1</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true"># 我的数据库是8.0.27 5版本的可以使用jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span>          <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis_plus_1<span class="token punctuation">?</span>serverTimezone=GMT%2B8<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver          <span class="token key atrule">username</span><span class="token punctuation">:</span> root          <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">'root'</span></code></pre><h2 id="4、创建用户service"><a href="#4、创建用户service" class="headerlink" title="4、创建用户service"></a>4、创建用户service</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"master"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指定所操作的数据源</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token operator">&lt;</span>UserMapper<span class="token punctuation">,</span> User<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="5、创建商品service"><a href="#5、创建商品service" class="headerlink" title="5、创建商品service"></a>5、创建商品service</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token operator">&lt;</span>Product<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"slave_1"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 要操作的数据源</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token operator">&lt;</span>ProductMapper<span class="token punctuation">,</span> Product<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">ProductService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="6、测试"><a href="#6、测试" class="headerlink" title="6、测试"></a>6、测试</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">MybatisPlusDatasourceApplicationTests</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ProductService productService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 测试</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>productService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>结果: </p><p>1、都能顺利获取对象，则测试成功</p><p>2、如果我们实现读写分离，将写操作方法加上主库数据源，读操作方法加上从库数据源，自动切换，是不是就能实现读写分离?</p><h1 id="十、MyBatisX插件"><a href="#十、MyBatisX插件" class="headerlink" title="十、MyBatisX插件"></a>十、MyBatisX插件</h1><p>MyBatis-Plus为我们提供了强大的mapper和service模板，能够大大的提高开发效率</p><p>但是在真正开发过程中，MyBatis-Plus并不能为我们解决所有问题，例如一些复杂的SQL，多表 联查，我们就需要自己去编写代码和SQL语句，我们该如何快速的解决这个问题呢，这个时候可 以使用MyBatisX插件</p><p>MyBatisX一款基于 IDEA 的快速开发插件，为效率而生</p><p><a href="https://baomidou.com/pages/ba5b24/">MyBatisX插件用法</a></p><p><img src="/2022/06/04/Mybatisplus/image20.png" alt="img"></p><p><img src="/2022/06/04/Mybatisplus/image21.png" alt="img"></p><p><img src="/2022/06/04/Mybatisplus/image22.png" alt="img"></p><p><img src="/2022/06/04/Mybatisplus/image23.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
